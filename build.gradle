//7 서브 프로젝트의 자바 플러그인 인식을 위한 빌드 스크립트 설정
buildscript {
    ext {
        spring = "org.springframework"
        boot = "${spring}.boot"
        bootVersion = "3.1.4"
        lombok = "org.projectlombok:lombok:1.18.28"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "$boot:spring-boot-gradle-plugin:$bootVersion"
    }
}

allprojects {
    group("com.tmk.prj")
    version("1.0.0")
}

subprojects {
    apply plugin: "java-library"  // java 보다는 java-library를 쓰기를 권장
    apply plugin: boot
    apply plugin: "io.spring.dependency-management"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly  // dependencies에 scope 설정
    }

    dependencies {
        implementation platform("$boot:spring-boot-dependencies:$bootVersion")
        compileOnly lombok
        annotationProcessor lombok

        testImplementation("$boot:spring-boot-starter-test")
    }

    test {
        useJUnitPlatform()  // jUnit 사용을 위한 플랫폼 선언
    }
}

//8
// jar파일안에 main메소드가 없으면 bootJar를 구성할 수 없다.
// 어차피 web모듈이나 비즈니스 모듈은 main 메소드를 작성할 일이 없다. 서버 모듈에만 있으면 된다.
// 따라서 나머지 모듈에서는 bootJar를 꺼줘야 한다.
rootProject.subprojects {subproject ->
    if(!subproject.name.startsWith("server-")) {
        subproject.tasks["bootJar"].enabled = false
    }
}